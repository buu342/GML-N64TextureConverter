<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enabled = true
width = 64
height = 22
text = ""
surf = -1
textpos = 0
caretpos = -1
popup = false
execute = -1
allowletter = true
allowsymbol = true
allownumber = true
dependonexecute = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (surf != -1 &amp;&amp; surface_exists(surf))
    surface_free(surf)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!surface_exists(surf))
    surf = surface_create(width-4, height-2)

// Draw the surface
surface_set_target(surf)
    var col = c_black
    draw_clear_alpha(c_white, 0)
    if (!enabled)
        col = make_color_rgb(172, 168, 153)
    draw_set_color(col)
    draw_set_font(fnt_input)
    draw_text(textpos, 0, text)
    if ((current_time%1000) &gt; 500 &amp;&amp; caretpos != -1)
    {
        var texlen = string_copy(text, 1, caretpos)
        texlen = string_width(texlen)
        draw_line(texlen+textpos, 0, texlen+textpos, 14)
    }
    draw_set_font(fnt_default)
    draw_set_color(c_white)
surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mx, my, changed = -1;
mx = window_view_mouse_get_x(0)
my = window_view_mouse_get_y(0)

if (dependonexecute) 
    enabled = script_execute(execute, 1)

if (global.lastbuttonpressed != id)
{
    caretpos = -1
    textpos = 0
}

if !enabled
    exit

// Select the input box
if ((mx &gt;= x &amp;&amp; mx &lt;= x+width &amp;&amp; my &gt;= y &amp;&amp; my &lt;= y+height) &amp;&amp; (instance_number(obj_popup) == 0 || popup == true))
{
    if mouse_check_button(mb_left)
    {
        global.lastbuttonpressed = id
        caretpos = string_length(text)
        draw_set_font(fnt_input)
        textpos = min(0, width-6-string_width(text))
    }
}
else if (mouse_check_button_pressed(mb_left) &amp;&amp; global.lastbuttonpressed == id)
    global.lastbuttonpressed = -1

// Detect key presses
if (global.lastbuttonpressed == id)
{
    switch (keyboard_key)
    {
        case vk_left:
        case vk_right:
        case vk_delete:
        case vk_backspace: 
            changed = keyboard_key break;
        case ord("0"): 
        case ord("1"): 
        case ord("2"): 
        case ord("3"): 
        case ord("4"): 
        case ord("5"): 
        case ord("6"): 
        case ord("7"): 
        case ord("8"): 
        case ord("9"): 
            if (allownumber) changed = keyboard_key break;
        case ord("a"):
        case ord("A"):
        case ord("B"):
        case ord("C"):
        case ord("D"):
        case ord("E"):
        case ord("F"):
        case ord("G"):
        case ord("H"):
        case ord("I"):
        case ord("J"):
        case ord("K"):
        case ord("L"):
        case ord("M"):
        case ord("N"):
        case ord("O"):
        case ord("P"):
        case ord("Q"):
        case ord("R"):
        case ord("S"):
        case ord("T"):
        case ord("U"):
        case ord("V"):
        case ord("W"):
        case ord("X"):
        case ord("Y"):
        case ord("Z"):
            if (allowletter) changed = keyboard_key break;
        case ord("_"):
            if (allowsymbol) changed = keyboard_key break;
        default: changed = -1 break;
    }
}

// Apply the key changes
if (changed != -1 &amp;&amp; keyboard_check_pressed(changed))
{
    var sub, w;
        
    // Add to the string
    switch (changed)
    {
        case vk_left: caretpos = max(0, (caretpos-1)) break;
        case vk_right: caretpos = min(string_length(text), (caretpos+1)) break;
        case vk_backspace: text = string_delete(text, caretpos, 1) if (caretpos &gt; 1) caretpos = caretpos-1 break;
        case vk_delete: text = string_delete(text, caretpos+1, 1) break;
        default: 
            if (keyboard_check(vk_shift))
                text = string_insert(chr(changed), text, caretpos+1)
            else
                text = string_insert(string_lower(chr(changed)), text, caretpos+1) 
            caretpos = caretpos+1 
            break;
    }
    
    // Move the text if the caret leaves the box
    draw_set_font(fnt_input)
    sub = string_copy(text, 1, caretpos)
    textpos = min(0, width-6-string_width(sub))
    
    // Execute a script if needed
    if (execute != -1)
        script_execute(execute, 0, text)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var col = c_white
var pop = 0
if (popup)
    pop = 1
if (!enabled)
    col = make_color_rgb(245, 244, 241)
draw_set_color(col)
draw_rectangle(x, y, x+width, y+height, false)
draw_set_color(make_color_rgb(127, 157, 185))
draw_rectangle(x-pop, y-pop, x+width, y+height, true)
draw_set_color(c_white)

if (surf != -1 &amp;&amp; surface_exists(surf))
    draw_surface(surf, x+3, y+1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
