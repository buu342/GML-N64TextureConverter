<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_colorpicker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>obj_popup</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>width = sprite_width
height = sprite_height
title = "Background Color"
col = background_color
colr = round(color_get_red(col))
colg = round(color_get_green(col))
colb = round(color_get_blue(col))
sound_play(snd_ding)
alarm[0] = 1
changing = 0

input_h = -1
input_s = -1
input_v = -1
input_r = -1
input_g = -1
input_b = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(obj_sprite) &gt; 0 &amp;&amp; background_color != col)
{
    scr_update_sprite()
    scr_update_alpha()
}
    
with obj_button
{
    if popup == true
        instance_destroy()
}

with obj_inputbox
{
    if popup == true
        instance_destroy()
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var obj = instance_create(x+51+32, y+299+12, obj_button)
with obj
{
    width = 65
    height = 25
    text = "Ok"
    popup = true
    execute = scr_popup_kill
    global.lastbuttonpressed = id
    dependonexecute = false
}

obj = instance_create(x+51+32+72, y+299+12, obj_button)
with obj
{
    width = 65
    height = 25
    text = "Cancel"
    popup = true
    execute = scr_cancel_backgroundcol
    dependonexecute = false
}

input_h = instance_create(x+105, y+231, obj_inputbox)
with (input_h)
{
    popup = true
    width = 26
    height = 19
    text = string(round(global.alphahue))
    execute = scr_input_hue
    allowletter = false
    allowsymbol = false
}

input_s = instance_create(x+105, y+231+22, obj_inputbox)
with (input_s)
{
    popup = true
    width = 26
    height = 19
    text = string(round(global.alphasat))
    execute = scr_input_sat
    allowletter = false
    allowsymbol = false
}

input_v = instance_create(x+105, y+232+22*2, obj_inputbox)
with (input_v)
{
    popup = true
    width = 26
    height = 19
    text = string(round(global.alphaval))
    execute = scr_input_val
    allowletter = false
    allowsymbol = false
}

input_r = instance_create(x+185, y+231, obj_inputbox)
with (input_r)
{
    popup = true
    width = 26
    height = 19
    text = string(obj_colorpicker.colr)
    execute = scr_input_red
    allowletter = false
    allowsymbol = false
}

input_g = instance_create(x+185, y+231+22, obj_inputbox)
with (input_g)
{
    popup = true
    width = 26
    height = 19
    text = string(obj_colorpicker.colg)
    execute = scr_input_green
    allowletter = false
    allowsymbol = false
}

input_b = instance_create(x+185, y+232+22*2, obj_inputbox)
with (input_b)
{
    popup = true
    width = 26
    height = 19
    text = string(obj_colorpicker.colb)
    execute = scr_input_blue
    allowletter = false
    allowsymbol = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mx, my, wxscale, wyscale;
mx = window_view_mouse_get_x(0)
my = window_view_mouse_get_y(0)
wxscale = window_get_width()/800
wyscale = window_get_height()/600

if mx &gt;= x+(width-29+4)*wxscale &amp;&amp; mx &lt;= (x+width-4)*wxscale &amp;&amp; my &gt;= (y+4)*wyscale &amp;&amp; my &lt;= y+(29-4)*wyscale &amp;&amp; mouse_check_button_released(mb_left) // Close button
{
    instance_destroy()
}
else if ((mx &gt;= x+10*wxscale &amp;&amp; my &gt;= y+37*wyscale &amp;&amp; mx &lt;= x+(10+175)*wxscale &amp;&amp; my &lt;= y+(37+187)*wyscale) || changing == 1) // Changing Hue/Sat
{
    if (mouse_check_button(mb_left))
    {
        global.alphahue = round(max(0,min(255,((mx-(x+10*wxscale))/175)*255)))
        global.alphasat = round(max(0,min(255, 255-((my-(y+37*wyscale))/187)*255)))
        event_perform(ev_other, ev_user0)
        
        colr = round(color_get_red(background_color))
        colg = round(color_get_green(background_color))
        colb = round(color_get_blue(background_color))
        
        input_h.text = string(global.alphahue)
        input_s.text = string(global.alphasat)
        input_r.text = string(colr)
        input_g.text = string(colg)
        input_b.text = string(colb)
        changing = 1
    }
}
else if ((mx &gt;= x+202*wxscale &amp;&amp; my &gt;= y+37*wyscale &amp;&amp; mx &lt;= x+212*wxscale &amp;&amp; my &lt;= y+(37+187)*wyscale) || changing == 2) // Changing value
{
    if (mouse_check_button(mb_left))
    {
        global.alphaval = round(max(0,min(255,255-((my-(y+37*wyscale))/187)*255)))
        event_perform(ev_other, ev_user0)
        
        colr = round(color_get_red(background_color))
        colg = round(color_get_green(background_color))
        colb = round(color_get_blue(background_color))
        
        input_v.text = string(global.alphaval)
        input_r.text = string(colr)
        input_g.text = string(colg)
        input_b.text = string(colb)
        changing = 2
    }
}
else if mx &gt;= x &amp;&amp; mx &lt;= x+width &amp;&amp; my &gt;= y &amp;&amp; my &lt;= y+height
{
    // Do nothing
}
else if mouse_check_button_pressed(mb_left)
    sound_play(snd_ding)


// Force mouse positions
if (mouse_check_button(mb_left) &amp;&amp; changing == 1 &amp;&amp; !(mx &gt;= x+10*wxscale &amp;&amp; my &gt;= y+37*wyscale &amp;&amp; mx &lt;= x+(10+175)*wxscale &amp;&amp; my &lt;= y+(37+187)*wyscale))
    window_mouse_set(max(x+10*wxscale, min(mouse_x, x+(10+175)*wxscale))*wxscale, max(y+37*wyscale, min(mouse_y, y+(37+187)*wyscale)))
else if (mouse_check_button(mb_left) &amp;&amp; changing == 2 &amp;&amp; !(mx &gt;= x+202*wxscale &amp;&amp; my &gt;= y+37*wyscale &amp;&amp; mx &lt;= x+212*wxscale &amp;&amp; my &lt;= y+(37+187)*wyscale))
    window_mouse_set(max(x+202*wxscale, min(mouse_x, x+212*wxscale)), max(y+37*wyscale, min(mouse_y, y+(37+187)*wyscale)))
else if (!mouse_check_button(mb_left))
    changing = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RGB to HSL conversion</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var h, s, l;
var r = obj_colorpicker.colr/255
var g = obj_colorpicker.colg/255
var b = obj_colorpicker.colb/255
var cmax = max(r, g, b)
var cmin = min(r, g, b)
var chroma = cmax-cmin

l = (cmax+cmin)/2
if (cmax == cmin)
{
    h = 0
    s = 0
}
else
{
    if (r == cmax)
    {
        var add = 0
        if (g &lt; b)
            add = 6
        h = ((g-b)/chroma+add)
    }
    else if (g == cmax)
        h = ((b-r)/chroma + 2)
    else if (b == cmax)
        h = ((r-g)/chroma + 4)
        
    if (chroma == 0)
        s = 0
    else
        s = chroma/(1-abs(2*l-1));
}   

global.alphahue = ((60*h)/360)*255
global.alphasat = s*255
global.alphaval = l*255
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HSL to HSV conversion</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_color = make_color_hsv(global.alphahue, hsl_to_hsv_s(global.alphahue, global.alphasat, global.alphaval), hsl_to_hsv_v(global.alphahue, global.alphasat, global.alphaval))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mx, my;
mx = window_view_mouse_get_x(0)
my = window_view_mouse_get_y(0)

// Color picker
draw_set_color(c_white)
draw_sprite(sprite_index, 1, x, y)
draw_sprite(spr_colorpickicons, 0, x+10+(global.alphahue/255)*175, y+37+187-(global.alphasat/255)*187)

// Final color preview
draw_set_color(background_color)
draw_rectangle(x+10, y+232, x+68, y+272, false)

// Value bar
draw_set_color(make_color_hsv(global.alphahue, global.alphasat, 128+global.alphasat/2))
draw_rectangle(x+202, y+37, x+212, y+37+187, false)
draw_set_color(c_white)
draw_sprite(sprite_index, 2, x, y)

// Popup body
draw_set_color(c_white)
draw_sprite(sprite_index, 0, x, y)

// Value picker
draw_set_color(c_white)
draw_sprite(spr_colorpickicons, 1, x+212+13, y+37+187-(global.alphaval/255)*187)

// Title
draw_set_color(c_white)
draw_set_font(fnt_popuptitle)
draw_set_valign(fa_middle)
draw_text(x+8, y+14, title)
draw_set_valign(fa_top)
draw_set_font(fnt_default)
draw_set_color(c_white)

// Close button
if mx &gt;= x+width-29+4 &amp;&amp; mx &lt;= x+width-4 &amp;&amp; my &gt;= y+4 &amp;&amp; my &lt;= y+29-4
{
    if mouse_check_button(mb_left)
        draw_sprite(spr_pop_corner,3,x+width-29,y)
    else
        draw_sprite(spr_pop_corner,2,x+width-29,y)
}
else
    draw_sprite(spr_pop_corner,1,x+width-29,y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Do nothing</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
