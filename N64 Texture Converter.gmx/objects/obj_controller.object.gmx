<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize self variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mousecolor = -1
mousealpha = -1
mx = 0
my = 0
arrayx = 0
arrayy = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize views</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lastmousex = -1
lastmousey = -1

view_xview[0] = 0
view_yview[0] = 0
view_xport[0] = 0
view_yport[0] = 0
view_wview[0] = 800
view_hview[0] = 600
view_wport[0] = 800
view_hport[0] = 600
view_enabled[0] = true
view_visible[0] = true

view_xview[1] = view_wview[0]
view_yview[1] = 0
view_xport[1] = VIEWXSTART
view_yport[1] = VIEWYSTART
view_wview[1] = 1
view_hview[1] = 1
view_wport[1] = 1
view_hport[1] = 1
view_enabled[1] = true
view_visible[1] = false

background_color = c_fuchsia

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Initialize globals</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lastbuttonpressed = -1

global.exporttype = "16B-RGBA"
global.usealpha = true
global.alphacolor = background_color
global.alphahue = color_get_hue(background_color)
global.alphasat = color_get_saturation(background_color)
global.alphaval = color_get_value(background_color)/2
global.alphatype = "AlphaMask"
global.usedummy = true
global.powertwo = false
global.chunk = false
global.chunkval[0] = 32 
global.chunkval[1] = 32

global.basetlutnum = 0
global.basetlut[256] = -1
global.basecolortlut[640, 480] = -1
scr_clear_basepal()

global.filename = "output"
global.arrayname = "output"
global.exportfile = "H"
global.exportlocation = -1

global.zoom = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Icon Buttons</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var obj, i, inc, inc2;
i=0;
inc = 24
inc2 = 30

// File
obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 0
    execute = scr_ask_restart
    hint = "New file"
}
i +=inc


// Import + Edit
obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 7
    execute = scr_ask_importsprite
    hint = "Import image"
}
i +=inc

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 9
    execute = scr_ask_importalpha
    hint = "Import alpha mask"
}
i +=inc2


// View
obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    execute = scr_togglealpha
    icon = 18
    hint = "Toggle alpha viewing"
}
i +=inc

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    execute = scr_showpalette
    icon = 19
    hint = "View palette"
}
i +=inc2

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 15
    execute = scr_zoom
    arguments = "In"
    hint = "Zoom in"
}
i +=inc

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 16
    execute = scr_zoom
    arguments = "Reset"
    hint = "Reset view"
}
i +=inc

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 17
    execute = scr_zoom
    arguments = "Out"
    hint = "Zoom out"
}
i+=inc2


// Export
obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 8
    execute = scr_showrename
    hint = "Rename output"
}
i+=inc

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 14
    execute = scr_generate_tlut
    hint = "Generate palette"
}
i +=inc

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 5
    execute = scr_compile
    hint = "Compile"
}
i +=inc2


// Other
/*
obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 10
}
i +=inc
*/

obj = instance_create(18+i,34,obj_iconbutton)
with obj
{
    icon = 4
    hint = "Open help page"
    execute = scr_showhelp
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Radial Buttons</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Radial Selection
var mult, i, posx, posy, obj;
i = 0
mult = 16
posx = 4
posy = 154+16+8


// Export Settings

obj = instance_create(160,541+18,obj_radialcheck)
with obj
{
    enabled = false
    text = "Single Color"
    execute = scr_togglealphatype
    value = "SingleColor"
    dependonexecute = true
}
obj = instance_create(160+96,541+18,obj_radialcheck)
with obj
{
    enabled = false
    text = "Alpha Mask"
    execute = scr_togglealphatype
    value = "AlphaMask"
    dependonexecute = true
}


// Export Settings

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "32-Bit RGBA"
    execute = scr_togglecompiletype
    value = "32B-RGBA"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "16-Bit RGBA"
    execute = scr_togglecompiletype
    value = "16B-RGBA"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "16-Bit YUV"
    execute = scr_togglecompiletype
    value = "16B-YUV"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "16-Bit IA"
    execute = scr_togglecompiletype
    value = "16B-IA"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "8-Bit IA"
    execute = scr_togglecompiletype
    value = "8B-IA"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "8-Bit I"
    execute = scr_togglecompiletype
    value = "8B-I"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "4-Bit IA"
    execute = scr_togglecompiletype
    value = "4B-IA"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "4-Bit I"
    execute = scr_togglecompiletype
    value = "4B-I"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "8-Bit Color Index"
    execute = scr_togglecompiletype
    value = "8B-CI"
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    text = "4-Bit Color Index"
    execute = scr_togglecompiletype
    value = "4B-CI"
}
i+=mult
i+=mult*4

// Export File

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    enabled = true
    text = "Header"
    execute = scr_toggleexportfile
    value = "H"
    dependonexecute = true
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    enabled = false
    text = "C + Header"
    execute = scr_toggleexportfile
    value = "CH"
    dependonexecute = true
}
i+=mult

obj = instance_create(posx,posy+i,obj_radialcheck)
with obj
{
    enabled = false
    text = "Binary File"
    execute = scr_toggleexportfile
    value = "B"
    dependonexecute = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check Boxes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var obj;

obj = instance_create(160,541,obj_checkbox)
with obj
{
    text = "Use alpha"
    execute = scr_checkbox_alpha
}

obj = instance_create(160+96,541,obj_checkbox)
with obj
{
    text = "Add dummy aligners"
    execute = scr_checkbox_dummy
    dependonexecute = true
}

obj = instance_create(160+96+96+48,541,obj_checkbox)
with obj
{
    text = "Force power of two"
    execute = scr_checkbox_powertwo
}

obj = instance_create(160+96+96+48,541+16,obj_checkbox)
with obj
{
    text = "Chunk image"
    execute = scr_checkbox_chunk
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Buttons</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var obj;
obj = instance_create(730-6,600-18-28,obj_button)
with obj
{
    icon = 14
    width = 140
    text = "Generate Palette"
    execute = scr_generate_tlut
    dependonexecute = true
}
obj = instance_create(730-6,600-18,obj_button)
with obj
{
    icon = 5
    width = 140
    text = "Compile Image"
    execute = scr_compile
    dependonexecute = true
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Input Boxes</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj = instance_create(160+96+96+48, 541+16+16, obj_inputbox)
with obj
{
    width = 32
    text = string(global.chunkval[0])
    execute = scr_input_chunkx
    allowletter = false
    allowsymbol = false
    dependonexecute = true
}

obj = instance_create(160+96+96+48*2, 541+16+16, obj_inputbox)
with obj
{
    width = 32
    text = string(global.chunkval[1])
    execute = scr_input_chunky
    allowletter = false
    allowsymbol = false
    dependonexecute = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Menu Bar</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var obj;

obj = instance_create(0, 0, obj_menubar)
with obj
{
    text = "File"
    items = ds_grid_create(4, 7)
    ds_grid_add_multiple(items, 0, 0, "New", "Ctrl+N", scr_ask_restart)
    ds_grid_add_multiple(items, 1, 7, "Import Image", "Ctrl+I", scr_ask_importsprite)
    ds_grid_add_multiple(items, 2, 9, "Import Alpha Image", "Ctrl+A", scr_ask_importalpha)
    ds_grid_add_multiple(items, 3, -1, -1, -1, -1)
    ds_grid_add_multiple(items, 4, 8, "Rename Files", "Ctrl+R", scr_showrename)
    ds_grid_add_multiple(items, 5, -1, -1, -1, -1)
    ds_grid_add_multiple(items, 6, 12, "Exit", "Alt+F4", scr_exit)
}

obj = instance_create(28, 0, obj_menubar)
with obj
{
    text = "Generate"
    items = ds_grid_create(4, 5)
    ds_grid_add_multiple(items, 0, 14, "Generate Palette", "Ctrl+P", scr_generate_tlut)
    ds_grid_add_multiple(items, 1, -1, "Import Base Palette", "Ctrl+B", scr_import_basepal_file)
    ds_grid_add_multiple(items, 2, -1, "Remove Base Palette", -1, scr_clear_basepal)
    ds_grid_add_multiple(items, 3, -1, -1, -1, -1)
    ds_grid_add_multiple(items, 4, 5, "Compile", "Ctrl+C", scr_compile)
}

obj = instance_create(85, 0, obj_menubar)
with obj
{
    text = "View"
    items = ds_grid_create(4, 6)
    ds_grid_add_multiple(items, 0, 18, "Toggle Alpha View", "Ctrl+T", scr_togglealpha)
    ds_grid_add_multiple(items, 1, 19, "View Palette", "Ctrl+V", scr_showpalette)
    ds_grid_add_multiple(items, 2, -1, -1, -1, -1)
    ds_grid_add_multiple(items, 3, 15, "Zoom In", "Ctrl++", scr_zoom_in)
    ds_grid_add_multiple(items, 4, 16, "Zoom Out", "Ctrl+-", scr_zoom_out)
    ds_grid_add_multiple(items, 5, 17, "Zoom Reset", -1, scr_zoom_reset)
}

obj = instance_create(119, 0, obj_menubar)
with obj
{
    text = "Help"
    items = ds_grid_create(4, 1)
    ds_grid_add_multiple(items, 0, 4, "Help", "F1", scr_showhelp)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Handle single alpha color pick</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(obj_popup) == 0 &amp;&amp; instance_exists(obj_sprite))
{
    mx = (window_view_mouse_get_x(0)-VIEWXSTART)/global.zoom
    my = (window_view_mouse_get_y(0)-VIEWYSTART)/global.zoom
    
    if (mx &gt;= 0 &amp;&amp; my &gt;= 0 &amp;&amp; mx &lt; view_wview[1] &amp;&amp; my &lt; view_hview[1])
    {
        arrayx = min(max(0, floor(mx+(view_xview[1]-SPRITEXSTART))), obj_sprite.sprite_width-1)
        arrayy = min(max(0, floor(my+(view_yview[1]-SPRITEYSTART))), obj_sprite.sprite_height-1)
        
        mousecolor = obj_sprite.sprite_color[arrayx, arrayy]
        mousealpha = obj_sprite.sprite_alpha[arrayx, arrayy]
        if (global.usealpha &amp;&amp; global.alphatype == "SingleColor" &amp;&amp; mouse_check_button(mb_left))
        {
            global.alphacolor = rgba_to_bgr(mousecolor)
            scr_update_alpha()
            if (scr_generate_tlut(1) == 0 &amp;&amp; obj_sprite.sprite_tlut[0] != -1)
                scr_generate_tlut(0, 1)
        }
        
        if (mouse_check_button(mb_middle))
        {
            if (lastmousex != -1 &amp;&amp; lastmousey != -1)
            {
                view_xview[1] += (lastmousex-window_mouse_get_x())/global.zoom
                view_yview[1] += (lastmousey-window_mouse_get_y())/global.zoom
                
                // Prevent the view from escaping
                if (view_xview[1] &lt; view_wview[0])
                    view_xview[1] = view_wview[0]
                if (view_yview[1] &lt; 0)
                    view_yview[1] = 0 
                if ((view_xview[1]-view_wview[0])+view_wview[1] &gt; obj_sprite.sprite_width)
                    view_xview[1] = (view_wview[0]+obj_sprite.sprite_width)-view_wview[1]
                if (view_yview[1]+view_hview[1] &gt; obj_sprite.sprite_height)
                    view_yview[1] = obj_sprite.sprite_height-view_hview[1]
            }
            lastmousex = window_mouse_get_x()
            lastmousey = window_mouse_get_y()
        }
        else
        {
            lastmousex = -1
            lastmousey = -1
        }
    }
    else
    {
        mousecolor = -1
        mousealpha = -1
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Handle background color popup</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(obj_popup) != 0)
    exit;

if (mouse_check_button_pressed(mb_left) &amp;&amp; window_view_mouse_get_x(0) &gt;= (122) &amp;&amp; window_view_mouse_get_y(0) &gt;= (274+64) &amp;&amp; window_view_mouse_get_x(0) &lt;= (138) &amp;&amp; window_view_mouse_get_y(0) &lt;= (290+64))
    instance_create(room_width/2-231/2, room_height/2-331/2, obj_colorpicker)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Handle shortcut keys</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_anykey))
{
    if (keyboard_check_pressed(vk_f1))
        scr_showhelp()
    
    if (keyboard_check(vk_control))
    {
        switch (keyboard_key)
        {
            case ord("A"): scr_ask_importalpha() break;
            case ord("B"): scr_import_basepal_file() break;
            case ord("C"): scr_compile() break;
            case ord("I"): scr_ask_importsprite() break;
            case ord("N"): scr_ask_restart() break;
            case ord("P"): scr_generate_tlut() break;
            case ord("R"): scr_showrename() break;
            case ord("T"): scr_togglealpha() break;
            case ord("V"): scr_showpalette() break;
            case 187: scr_zoom_in() break;
            case 189: scr_zoom_out() break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Display the splash</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(x, y, obj_splash)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw the Room</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sprite canvas
if (instance_exists(obj_sprite))
{
    draw_set_color(c_black)
    draw_rectangle(view_xport[1]-1, view_yport[1]-1, view_xport[1]+view_wport[1], view_yport[1]+view_hport[1], true)
}
draw_set_color(c_black)
draw_set_font(fnt_default)
draw_text(160+96+96+48+36, 541+16+16, "x")
draw_set_color(c_white)

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Draw sprite information</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, inc, append;
var finalw, finalh;
inc = 16;
i = 0;

if (global.exportfile == "H")
    append = ".h"
else if (global.exportfile == "CH")
    append = ".c"
else if (global.exportfile == "B")
    append = ".bin"


if instance_exists(obj_sprite)
{
    if (global.powertwo)
    {
        finalw = power(2, ceil(log2(obj_sprite.sprite_width)))
        finalh = power(2, ceil(log2(obj_sprite.sprite_height)))
    }
    else
    {
        finalw = obj_sprite.sprite_width
        finalh = obj_sprite.sprite_height
    }
}

draw_set_font(fnt_button)
draw_set_color(c_black)
draw_set_halign(fa_middle)
draw_text(152/2,53+i,"Image Information")
draw_set_halign(fa_left)

i +=inc
if instance_exists(obj_sprite)
    draw_text(4,53+i,scr_stringcut("File = "+global.filename+append,124))
else
{
    draw_set_color(c_red)
    draw_text(4,53+i,"No image loaded")
    draw_set_color(c_black)
}
i +=inc
if (global.exportfile != "B")
{
    if instance_exists(obj_sprite)
        draw_text(4,53+i,scr_stringcut("Array = "+global.arrayname, 124))
    i +=inc
}
if instance_exists(obj_sprite)
    draw_text(4,53+i,"Size = "+string(finalw)+"x"+string(finalh))
i +=inc
if instance_exists(obj_sprite)
{
    var extra;
    var size;
    var chunk;
    switch(global.exporttype)
    {
        case ("32B-RGBA"):
            extra = 0
            size = finalw*finalh*4
            chunk = global.chunkval[0]*global.chunkval[1]*4
            break;
        case ("16B-RGBA"):
        case ("16B-IA"):
        case ("16B-YUV"):
            extra = 0
            size = finalw*finalh*2
            chunk = global.chunkval[0]*global.chunkval[1]*2
            break;
        case ("8B-CI"):
            extra = 2048
            size = finalw*finalh
            chunk = global.chunkval[0]*global.chunkval[1]
            break;
        case ("4B-CI"):
            extra = 2048
            size = ceil(finalw/2)*finalh
            chunk = ceil(global.chunkval[0]/2)*global.chunkval[1]
            break;
        case ("8B-IA"):
        case ("8B-I"):
            extra = 0
            size = finalw*finalh
            chunk = global.chunkval[0]*global.chunkval[1]
            break;
        case ("4B-IA"):
        case ("4B-I"):
            extra = 0
            size = ceil(finalw/2)*finalh
            chunk = ceil(global.chunkval[0]/2)*global.chunkval[1]
            break;
        default:
            extra=0;
            size=0;
            chunk=0;
            break;
    }
    if (size+extra &gt; 4096)
        draw_set_color(c_red)
    if (global.chunk)
        draw_text(4, 53+i, scr_stringcut("TMEM = "+string(size+extra)+" ("+string(chunk)+")", 124))
    else
        draw_text(4, 53+i, scr_stringcut("TMEM = "+string(size+extra), 124))
    draw_set_color(c_black)
}
i +=inc
i +=(inc*2)-8


draw_set_halign(fa_middle)
draw_text(152/2,53+i,"Color Format")
i +=inc*14
draw_text(152/2,53+i, "Export Format")
draw_set_halign(fa_left)

draw_set_color(c_black)
draw_set_font(fnt_button)
draw_text(4,239+34+64,"Background Color = ")
draw_set_color(c_black)
draw_rectangle(122-1,274+64-1,138+1,290+64+1,false)
draw_set_color(background_color)
draw_rectangle(122,274+64,138,290+64,false)
draw_set_font(fnt_default)
draw_set_color(c_white)

if global.usealpha == true &amp;&amp; global.alphatype == "SingleColor"
{
    draw_set_color(c_black)
    draw_set_font(fnt_button)
    draw_text(160,539+36,"Transparent Color = ")
    draw_set_color(global.alphacolor)
    draw_rectangle(158+124,543+33,158+54+124,543+33+16,false)
    draw_set_color(c_black)
    draw_rectangle(158+124,543+33,158+54+124,543+33+16,true)
    draw_set_font(fnt_default)
    draw_set_color(c_white)
}

draw_set_color(c_white)
draw_set_font(fnt_default)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Mouse Pixel Info</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>32-Bit RGBA</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "32B-RGBA"
{
    var i, inc, text, c;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    
    draw_text(9,i,"      8Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;24)&amp;$FF)
        draw_text(8,i,"R = "+string(c))
        draw_text(67,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"R = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;16)&amp;$FF)
        draw_text(8,i,"G = "+string(c))
        draw_text(67,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"G = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;8)&amp;$FF)
        draw_text(8,i,"B = "+string(c))
        draw_text(67,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"B = ")
    i +=inc
    
    if (mousealpha != -1)
    {
        c = (mousealpha&amp;$FF)
        draw_text(8,i,"A = "+string(c))
        draw_text(67,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"A = ")
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
    {
        c = (mousecolor&amp;$FFFFFF00) | (mousealpha&amp;$FF)
        draw_text(8,i,"Out = 0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        draw_set_color(rgba_to_bgr(mousecolor))
        draw_triangle(120, i+2, 148, i+2, 148, i+14, false)
        draw_set_alpha((mousealpha&amp;$FF)/255)
        draw_triangle(120, i+2, 120, i+14, 148, i+14, false)
        draw_set_alpha(1)
        draw_set_color(c_black)
        draw_rectangle(120,i+2,148,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>16-Bit RGBA</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "16B-RGBA"
{
    var i, inc, text, c;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    
    draw_text(9,i,"      8Bt    5Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;24)&amp;$FF)
        draw_text(8,i,"R = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"R = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;16)&amp;$FF)
        draw_text(8,i,"G = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"G = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;8)&amp;$FF)
        draw_text(8,i,"B = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"B = ")
    i +=inc
    
    if (mousealpha != -1)
    {
        c = (mousealpha&amp;$FF)
        draw_text(8,i,"A = "+string(c))
        c = round(c/255)
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"A = ")
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
    {
        c = RGBA_32B_to_16B((mousecolor&amp;$FFFFFF00) | (mousealpha&amp;$FF))
        draw_text(8,i,"Out = 0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        var r, g, b;
        r = ((c&gt;&gt;11)&amp;$1F)*255/31
        g = ((c&gt;&gt;6)&amp;$1F)*255/31
        b = ((c&gt;&gt;1)&amp;$1F)*255/31
        draw_set_color(make_color_rgb(r, g, b))
        draw_triangle(100, i+2, 132, i+2, 132, i+14, false)
        draw_set_alpha(round((mousealpha&amp;$FF)/255))
        draw_triangle(100, i+2, 100, i+14, 132, i+14, false)
        draw_set_alpha(1)
        draw_set_color(c_black)
        draw_rectangle(100,i+2,132,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>8-Bit CI</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "8B-CI"
{
    var i, inc, text, c;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    
    draw_text(9,i,"      8Bt    5Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;24)&amp;$FF)
        draw_text(8,i,"R = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"R = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;16)&amp;$FF)
        draw_text(8,i,"G = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"G = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;8)&amp;$FF)
        draw_text(8,i,"B = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"B = ")
    i +=inc
    
    if (mousealpha != -1)
    {
        c = (mousealpha&amp;$FF)
        draw_text(8,i,"A = "+string(c))
        c = round(c/255)
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"A = ")
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
    {
        var tluttext = "????"
        if (global.basetlutnum != 0)
        {
            var t = find_basetlut(arrayx, arrayy);
            if (t != -1)
                tluttext = "0x"+dec_to_hex(t)
        }
        else if (obj_sprite.sprite_tlut[0] != -1)
            tluttext = "0x"+dec_to_hex(obj_sprite.texel_tlut[arrayx, arrayy])
        c = RGBA_32B_to_16B((mousecolor&amp;$FFFFFF00) | (mousealpha&amp;$FF))
        draw_text(8,i,"Out = "+tluttext+"(0x"+dec_to_hex(c)+")")
    }
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        var r, g, b;
        r = ((c&gt;&gt;11)&amp;$1F)*255/31
        g = ((c&gt;&gt;6)&amp;$1F)*255/31
        b = ((c&gt;&gt;1)&amp;$1F)*255/31
        draw_set_color(make_color_rgb(r, g, b))
        draw_triangle(126, i+2, 148, i+2, 148, i+14, false)
        draw_set_alpha(round((mousealpha&amp;$FF)/255))
        draw_triangle(126, i+2, 126, i+14, 148, i+14, false)
        draw_set_alpha(1)
        draw_set_color(c_black)
        draw_rectangle(126,i+2,148,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>4-Bit CI</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "4B-CI"
{
    var i, inc, text, c;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    
    draw_text(9,i,"      8Bt    5Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;24)&amp;$FF)
        draw_text(8,i,"R = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"R = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;16)&amp;$FF)
        draw_text(8,i,"G = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"G = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        c = ((mousecolor&gt;&gt;8)&amp;$FF)
        draw_text(8,i,"B = "+string(c))
        c = c&gt;&gt;3
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"B = ")
    i +=inc
    
    if (mousealpha != -1)
    {
        c = (mousealpha&amp;$FF)
        draw_text(8,i,"A = "+string(c))
        c = round(c/255)
        draw_text(67,i,string(c))
        draw_text(101,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"A = ")
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
    {
        var tluttext = "????"
        if (obj_sprite.sprite_tlut[0] != -1 || global.basetlutnum &gt; 0)
        {
            var t = calc_tlut4b_index(arrayx, arrayy);
            if (t != -1)
                tluttext = "0x"+dec_to_hex(t)
        }
        c = RGBA_32B_to_16B((mousecolor&amp;$FFFFFF00) | (mousealpha&amp;$FF))
        draw_text(8,i,"Out = "+tluttext+"(0x"+dec_to_hex(c)+")")
    }
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        var r, g, b;
        r = ((c&gt;&gt;11)&amp;$1F)*255/31
        g = ((c&gt;&gt;6)&amp;$1F)*255/31
        b = ((c&gt;&gt;1)&amp;$1F)*255/31
        draw_set_color(make_color_rgb(r, g, b))
        draw_triangle(126, i+2, 148, i+2, 148, i+14, false)
        draw_set_alpha(round((mousealpha&amp;$FF)/255))
        draw_triangle(126, i+2, 126, i+14, 148, i+14, false)
        draw_set_alpha(1)
        draw_set_color(c_black)
        draw_rectangle(126,i+2,148,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>16-Bit IA</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "16B-IA"
{
    var i, inc, text, gray;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    
    draw_text(9,i,"      8Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
        gray = rgb_to_gray(mousecolor)
        
    if (mousecolor != -1)
    {
        draw_text(8,i,"I  = "+string(gray))
        draw_text(67,i,"0x"+dec_to_hex(gray))
    }
    else
        draw_text(8,i,"I  = ")
    i +=inc
    
    if (mousealpha != -1)
    {
        var c = (mousealpha&amp;$FF)
        draw_text(8,i,"A = "+string(c))
        draw_text(67,i,"0x"+dec_to_hex(c))
    }
    else
        draw_text(8,i,"A = ")
    i +=inc
    i +=inc
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(8,i,"Out = 0x"+dec_to_hex((gray&lt;&lt;8)|(mousealpha&amp;$FF)))
    }
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        draw_set_color(make_color_rgb(gray, gray, gray))
        draw_triangle(100, i+2, 132, i+2, 132, i+14, false)
        draw_set_alpha((mousealpha&amp;$FF)/255)
        draw_triangle(100, i+2, 100, i+14, 132, i+14, false)
        draw_set_alpha(1)
        draw_set_color(c_black)
        draw_rectangle(100,i+2,132,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>8-Bit IA</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "8B-IA"
{
    var i, inc, text, gray, alpha;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    
    draw_text(9,i,"      8Bt    4Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        gray = bitcrunch(rgb_to_gray(mousecolor), 4)
        alpha = bitcrunch((mousealpha&amp;$FF), 4) 
    }
        
    if (mousecolor != -1)
    {
        
        draw_text(8,i,"I  = "+string(rgb_to_gray(mousecolor)))
        draw_text(67,i,string(gray))
        draw_text(101,i,"0x"+dec_to_hex(gray))
    }
    else
        draw_text(8,i,"I  = ")
    i +=inc
    
    if (mousealpha != -1)
    {
        draw_text(8,i,"A = "+string((mousealpha&amp;$FF)))
        draw_text(67,i,string(alpha))
        draw_text(101,i,"0x"+dec_to_hex(alpha))
    }
    else
        draw_text(8,i,"A = ")
    i +=inc
    i +=inc
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(8,i,"Out = 0x"+dec_to_hex((gray&lt;&lt;4)|alpha))
    }
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        var gray = gray*255/15
        draw_set_color(make_color_rgb(gray, gray, gray))
        draw_triangle(100, i+2, 132, i+2, 132, i+14, false)
        draw_set_alpha(alpha/15)
        draw_triangle(100, i+2, 100, i+14, 132, i+14, false)
        draw_set_alpha(1)
        draw_set_color(c_black)
        draw_rectangle(100,i+2,132,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>8-Bit I</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "8B-I"
{
    var i, inc, text, gray;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    
    draw_text(9,i,"      8Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
        gray = rgb_to_gray(mousecolor)
        
    if (mousecolor != -1)
    {
        draw_text(8,i,"I  = "+string(gray))
        draw_text(67,i,"0x"+dec_to_hex(gray))
    }
    else
        draw_text(8,i,"I  = ")
    i +=inc
    
    i +=inc
    i +=inc
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(8,i,"Out = 0x"+dec_to_hex(gray))
    }
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        draw_set_color(make_color_rgb(gray, gray, gray))
        draw_rectangle(100,i+2,132,i+14,false)
        draw_set_color(c_black)
        draw_rectangle(100,i+2,132,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>4-Bit IA</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "4B-IA"
{
    var i, inc, text, gray, alpha;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    gray = rgb_to_gray(mousecolor);
    graycrunched = bitcrunch(gray, 3);
    alpha = (mousealpha&amp;$FF);
    alphacrunched = bitcrunch(alpha, 1);
    
    draw_text(9,i,"      8Bt    3Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(8,i,"I = "+string(gray))
        draw_text(67,i,string(graycrunched))
        draw_text(101,i,"0x"+dec_to_hex(graycrunched))
    }
    else
        draw_text(8,i,"I = ")
    i +=inc
    
    if (mousealpha != -1)
    {
        draw_text(8,i,"A = "+string(alpha))
        draw_text(67,i,string(alphacrunched))
        draw_text(101,i,"0x"+dec_to_hex(alphacrunched))
    }
    else
        draw_text(8,i,"A = ")
    i +=inc
    i +=inc
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
        draw_text(8,i,"Out = 0x"+dec_to_hex(calc_ia4_index(arrayx, arrayy)))
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        var c = graycrunched*255/7
        draw_set_color(make_color_rgb(c, c, c))
        draw_triangle(100, i+2, 132, i+2, 132, i+14, false)
        draw_set_alpha(alphacrunched)
        draw_triangle(100, i+2, 100, i+14, 132, i+14, false)
        draw_set_alpha(1)
        draw_set_color(c_black)
        draw_rectangle(100,i+2,132,i+14,true)
        draw_set_color(c_white)
    }


    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>4-Bit I</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "4B-I"
{
    var i, inc, text, gray, alpha;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    gray = rgb_to_gray(mousecolor);
    graycrunched = bitcrunch(gray, 4);
    
    draw_text(9,i,"      8Bt    4Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(8,i,"I = "+string(gray))
        draw_text(67,i,string(graycrunched))
        draw_text(101,i,"0x"+dec_to_hex(graycrunched))
    }
    else
        draw_text(8,i,"I = ")
    i +=inc
    i +=inc
    i +=inc
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
        draw_text(8,i,"Out = 0x"+dec_to_hex(calc_i4_index(arrayx, arrayy)))
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        var c = graycrunched*255/15
        draw_set_color(make_color_rgb(c, c, c))
        draw_rectangle(100,i+2,132,i+14,false)
        draw_set_color(c_black)
        draw_rectangle(100,i+2,132,i+14,true)
        draw_set_color(c_white)
    }


    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>16-Bit YUV</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.exporttype == "16B-YUV"
{
    var i, inc, text, YUV=0, U=0, Y1=0, V=0, Y2=0;
    
    draw_set_font(fnt_button)
    draw_set_color(c_black)
    inc = 16;
    i = 480;
    if (instance_number(obj_sprite) &gt; 0 &amp;&amp; arrayx &lt; obj_sprite.sprite_width &amp;&amp; arrayy &lt; obj_sprite.sprite_height)
    {
        YUV = calc_yuv_index(arrayx, arrayy);
        U = (YUV&gt;&gt;24)&amp;$FF
        Y1 = (YUV&gt;&gt;16)&amp;$FF
        V = (YUV&gt;&gt;8)&amp;$FF
        Y2 = YUV&amp;$FF
    }
    
    draw_text(9,i,"      8Bt    Hex")
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(8,i,"U = "+string(U))
        draw_text(67,i,dec_to_hex(U))
    }
    else
        draw_text(8,i,"U = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(6,i,"Y1= "+string(Y1))
        draw_text(67,i,dec_to_hex(Y1))
    }
    else
        draw_text(6,i,"Y1= ")
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(8,i,"V = "+string(V))
        draw_text(67,i,dec_to_hex(V))
    }
    else
        draw_text(8,i,"V = ")
    i +=inc
    
    if (mousecolor != -1)
    {
        draw_text(6,i,"Y2= "+string(Y2))
        draw_text(67,i,dec_to_hex(Y2))
    }
    else
        draw_text(6,i,"Y2= ")
    i +=inc
    i +=inc
    
    if (mousecolor != -1)
        draw_text(8,i,"Out = 0x"+dec_to_hex(YUV))
    else
        draw_text(8,i,"Out = ")
    
    if (mousecolor != -1)
    {
        var c, r, g, b;
        c = RGBA_32B_to_16B((mousecolor&amp;$FFFFFF00) | (mousealpha&amp;$FF))
        r = ((c&gt;&gt;11)&amp;$1F)*255/31
        g = ((c&gt;&gt;6)&amp;$1F)*255/31
        b = ((c&gt;&gt;1)&amp;$1F)*255/31
        draw_set_color(make_color_rgb(r, g, b))
        draw_rectangle(120,i+2,148,i+14,false)
        draw_set_color(c_black)
        draw_rectangle(120,i+2,148,i+14,true)
        draw_set_color(c_white)
    }

    draw_set_color(c_white)
    draw_set_font(fnt_default)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
